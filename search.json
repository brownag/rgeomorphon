[{"path":"http://humus.rocks/rgeomorphon/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"http://humus.rocks/rgeomorphon/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"http://humus.rocks/rgeomorphon/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"http://humus.rocks/rgeomorphon/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"http://humus.rocks/rgeomorphon/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"http://humus.rocks/rgeomorphon/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"http://humus.rocks/rgeomorphon/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"http://humus.rocks/rgeomorphon/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"http://humus.rocks/rgeomorphon/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"http://humus.rocks/rgeomorphon/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"http://humus.rocks/rgeomorphon/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"http://humus.rocks/rgeomorphon/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"http://humus.rocks/rgeomorphon/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"http://humus.rocks/rgeomorphon/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"http://humus.rocks/rgeomorphon/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"http://humus.rocks/rgeomorphon/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"http://humus.rocks/rgeomorphon/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"http://humus.rocks/rgeomorphon/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"http://humus.rocks/rgeomorphon/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"http://humus.rocks/rgeomorphon/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"http://humus.rocks/rgeomorphon/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"http://humus.rocks/rgeomorphon/articles/geomorphons-tiled.html","id":"working-with-tiles","dir":"Articles","previous_headings":"","what":"Working with Tiles","title":"Parallel and Distributed Processing with 'rgeomorphon'","text":"Parallel processing rgeomorphon achieved splitting input raster smaller tiles. tile processed independently separate worker. results combined back single, seamless raster. number tiles estimated using terra::mem_info() identify raster memory requirements, amount free memory, fraction memory can used terra, number “copies” input data raster needed complete processing, etc. tiled approach used automatically raster large fit memory. However, can either directly set number chunks use, set factors related relative memory usage constraints.","code":""},{"path":[]},{"path":"http://humus.rocks/rgeomorphon/articles/geomorphons-tiled.html","id":"two-layers-of-parallelism","dir":"Articles","previous_headings":"The Parallel Ecosystem","what":"Two Layers of Parallelism","title":"Parallel and Distributed Processing with 'rgeomorphon'","text":"rgeomorphon offers two distinct layers parallelism accelerate calculations. parallelism allows rgeomorphon perform optimally across range hardware, personal laptop high-performance computing (HPC) cluster. RcppParallel speeds work inside tile, packages futureverse allow distribute processing multiple tiles across multiple R sessions. Low-Level Parallelism (within single chunk): core, rgeomorphon uses RcppParallel execute main geomorphon algorithm C++. provides efficient, multi-threaded computation single data chunk. run geomorphons() raster fits memory, RcppParallel automatically attempt use multiple CPU cores speed calculation. form shared-memory parallelism works “box.” High-Level Parallelism (across multiple chunks): rasters large fit memory, rgeomorphon divides data smaller, independent tiles. can control independent tiles processed providing parallel lapply-like function LAPPLY.FUN argument. great option future.apply::future.lapply(). two key steps setting R session: Set future plan: tells R distribute tiles. example, plan(multisession) tells future use separate R sessions local machine. Provide parallel lapply function: need pass parallel-aware loop function geomorphons() via LAPPLY.FUN argument.","code":""},{"path":"http://humus.rocks/rgeomorphon/articles/geomorphons-tiled.html","id":"scaling-up-from-a-laptop-to-a-cluster","dir":"Articles","previous_headings":"The Parallel Ecosystem","what":"Scaling Up: From a Laptop to a Cluster","title":"Parallel and Distributed Processing with 'rgeomorphon'","text":"piece code need change switch different parallel strategies future::plan(). single command configures entire backend. Let’s look common scenarios.","code":""},{"path":"http://humus.rocks/rgeomorphon/articles/geomorphons-tiled.html","id":"scenario-1-sequential-processing-no-parallelism","dir":"Articles","previous_headings":"The Parallel Ecosystem > Scaling Up: From a Laptop to a Cluster","what":"Scenario 1: Sequential Processing (No Parallelism)","title":"Parallel and Distributed Processing with 'rgeomorphon'","text":"disable high-level parallelism process tiles one--one main R session, use plan(sequential). great debugging situations overhead parallelism isn’t worth .","code":"library(future)  # Process everything in the current R session, one tile after another. plan(sequential)"},{"path":"http://humus.rocks/rgeomorphon/articles/geomorphons-tiled.html","id":"scenario-2-local-multicore-processing","dir":"Articles","previous_headings":"The Parallel Ecosystem > Scaling Up: From a Laptop to a Cluster","what":"Scenario 2: Local Multicore Processing","title":"Parallel and Distributed Processing with 'rgeomorphon'","text":"Local processing using multiple R sessions common scenario users modern multi-core laptop workstation. plan(multisession) starts several new, independent R sessions background local machine. session work different tile raster. backend, low-level RcppParallel engine within worker still try use multiple threads, competing CPU cores. Even , simple effective way parallelize single machine.","code":"# Use 4 background R sessions on this computer future::plan(multisession, workers = 4)"},{"path":"http://humus.rocks/rgeomorphon/articles/geomorphons-tiled.html","id":"scenario-3-distributed-cluster-processing","dir":"Articles","previous_headings":"The Parallel Ecosystem > Scaling Up: From a Laptop to a Cluster","what":"Scenario 3: Distributed Cluster Processing","title":"Parallel and Distributed Processing with 'rgeomorphon'","text":"access High-Performance Computing (HPC) cluster several machines network, can use cluster backend. future framework handle logistics sending individual tiles different machines processing. setup, rgeomorphon send tile machine1.local. arrives, RcppParallel engine machine1.local take use local cores process tile fast possible. allows scale processing power far beyond limits single computer.","code":"# Distribute work to two specific machines on the local network future::plan(cluster, workers = c(\"machine1.local\", \"machine2.local\"))"},{"path":"http://humus.rocks/rgeomorphon/articles/geomorphons-tiled.html","id":"the-geomorphons-call-stays-the-same","dir":"Articles","previous_headings":"The Parallel Ecosystem","what":"The geomorphons() Call Stays the Same","title":"Parallel and Distributed Processing with 'rgeomorphon'","text":"Regardless backends configure future::plan(), call geomorphons() remains identical. learn different future backends configuration options (including job schedulers like Slurm TORQUE), highly recommend exploring documentation vignettes official future package website.","code":"g_forms <- geomorphons(     my_large_dem,     search = 50,     LAPPLY.FUN = function(X, FUN, ...) {         future.apply::future_lapply(X, FUN, future.seed = TRUE, ...)     } )  # Remember to always return to a sequential plan to shut down workers plan(sequential)"},{"path":"http://humus.rocks/rgeomorphon/articles/geomorphons-tiled.html","id":"demo-with-salton","dir":"Articles","previous_headings":"","what":"Demo with salton","title":"Parallel and Distributed Processing with 'rgeomorphon'","text":"Let’s demonstrate salton dataset included rgeomorphon. dataset small normally trigger tiled processing. force tiled processing can manipulate environment variables rgeomorphon uses estimate memory needs. set R_RGEOMORPHON_MEM_SCALE_NEED tell function much memory processing input raster need. scaling factor number equivalent “copies” input data need process . can also pass nchunk argument directly geomorphons() bypass memory-based heuristics. Now geomorphons() use tiled approach, can set parallel plan execute calculation. Use LAPPLY.FUN argument pass future.apply::future_lapply. tells geomorphons() use future backend processing tiles","code":"library(rgeomorphon) library(terra) ## terra 1.8.60 library(future) library(future.apply)  # Load the salton dataset and prepare it as a SpatRaster data(\"salton\", package = \"rgeomorphon\") dem <- terra::rast(salton) names(dem) <- \"Elevation\" crs(dem) <- attr(salton, \"crs\") ext(dem) <- attr(salton, \"extent\")  # By default, this small raster is processed in a single chunk geomorphon_chunks_needed(dem) ## [1] 1 # Scale up the memory needed (equivalent to number of input raster copies) Sys.setenv(R_RGEOMORPHON_MEM_SCALE_NEED = 1e7)  # which will cause the chunking algorithm to divide the raster geomorphon_chunks_needed(dem) ## [1] 17 # Unset the environment variable Sys.unsetenv(\"R_RGEOMORPHON_MEM_SCALE_NEED\") # Set up a multisession future plan with 4 workers # This creates 4 background R sessions to do the work future::plan(multisession, workers = 4) system.time({     g_parallel <- geomorphons(         dem,         search = 10,         flat = 0.1,         LAPPLY.FUN = function(X, FUN, ...) {             future.apply::future_lapply(X, FUN, future.seed = TRUE, ...)         },         nchunk = 2     ) }) ##    user  system elapsed  ##   1.768   0.274  13.485 # Shut down the parallel workers future::plan(sequential) # Inspect terra::plot(g_parallel, main = \"Geomorphons via Tiled Processing\")"},{"path":"http://humus.rocks/rgeomorphon/articles/geomorphons-tiled.html","id":"important-notes","dir":"Articles","previous_headings":"Demo with salton","what":"Important Notes","title":"Parallel and Distributed Processing with 'rgeomorphon'","text":"Overhead: small datasets like salton, overhead setting parallel sessions tiling data make process slower simple sequential calculation. benefits parallel processing become apparent larger rasters. future.seed = TRUE: Using future.seed = TRUE highly recommended ensure random number generation handled properly across parallel sessions, making results reproducible. Backend Flexibility: future package allows many different parallel backends. geomorphons() code remains exactly .","code":""},{"path":"http://humus.rocks/rgeomorphon/articles/geomorphons-tiled.html","id":"beyond-parallelism-the-flexibility-of-lapply-fun","dir":"Articles","previous_headings":"","what":"Beyond Parallelism: The Flexibility of LAPPLY.FUN","title":"Parallel and Distributed Processing with 'rgeomorphon'","text":"future.apply::future_lapply recommended way achieve scalable, high-level parallelism, LAPPLY.FUN argument intentionally designed generic interface. locked futureverse ecosystem. can provide R function behaves like base::lapply(), giving control tiles processed. hook makes tile-processing loop customizable, allowing logging, error handling, integration virtually sequential parallel looping mechanism R. example: Using Alternative Parallel Backends: prefer different parallel framework, one provided base parallel package, can easily integrate . Injecting Progress Reporting Logging: large datasets, processing can take long time. can use LAPPLY.FUN create wrapper function provides real-time feedback writes log file tile completed. doesn’t require parallel backend; simply modifies loop’s behavior. example , create custom function prints message processing tile. Tiles processed sequentially base::lapply() prints start end message console every tile processed, giving live view progress.","code":"# Example using the base R parallel package library(parallel) cl <- makeCluster(4)  g_forms_par <- geomorphons(     dem,     search = 10,     flat = 0.1,     LAPPLY.FUN = function(X, FUN, ...) {         parLapply(cl, X, FUN, ...)     } )  stopCluster(cl) # Define a custom lapply-like function that adds reporting reporting_lapply <- function(X, FUN, ...) {      reporting_FUN <- function(i) {         message(paste0(\"Starting tile #\", i, \" at \", Sys.time()))         result <- FUN(i, ...)         message(paste0(\"Finished tile #\", i, \" at \", Sys.time()))         return(result)     }      lapply(X, reporting_FUN) }  g_forms_reported <- geomorphons(     dem,     search = 10,     flat = 0.1,     LAPPLY.FUN = reporting_lapply )"},{"path":"http://humus.rocks/rgeomorphon/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew Brown. Author, maintainer.","code":""},{"path":"http://humus.rocks/rgeomorphon/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Brown (2025). rgeomorphon: Lightweight Implementation 'Geomorphon' Algorithm. R package version 0.3.0, https://github.com/brownag/rgeomorphon/. Jasiewicz J, Stepinski T (2013). “Geomorphons - pattern recognition approach classification mapping landforms.” Geomorphology, 182, 147-156. doi:10.1016/j.geomorph.2012.11.005. Jasiewicz J, Stepinski T, GRASS Development Team (2024). Geographic Resources Analysis Support System (GRASS) Software, Version 8.3. Open Source Geospatial Foundation, USA. r.geomorphon module, https://grass.osgeo.org/grass-stable/manuals/r.geomorphon.html.","code":"@Manual{,   title = {rgeomorphon: A Lightweight Implementation of the 'Geomorphon' Algorithm},   author = {Andrew Brown},   note = {R package version 0.3.0},   year = {2025},   url = {https://github.com/brownag/rgeomorphon/}, } @Article{,   title = {Geomorphons - a pattern recognition approach to classification and mapping of landforms},   author = {Jaroslaw Jasiewicz and Tomasz Stepinski},   journal = {Geomorphology},   year = {2013},   volume = {182},   pages = {147-156},   doi = {10.1016/j.geomorph.2012.11.005}, } @Manual{,   title = {Geographic Resources Analysis Support System (GRASS) Software, Version 8.3},   author = {Jaroslaw Jasiewicz and Tomasz Stepinski and {GRASS Development Team}},   note = {r.geomorphon module},   organization = {Open Source Geospatial Foundation},   address = {USA},   year = {2024},   url = {https://grass.osgeo.org/grass-stable/manuals/r.geomorphon.html}, }"},{"path":"http://humus.rocks/rgeomorphon/index.html","id":"rgeomorphon","dir":"","previous_headings":"","what":"A Lightweight Implementation of the Geomorphon Algorithm","title":"A Lightweight Implementation of the Geomorphon Algorithm","text":"lightweight implementation ‘geomorphon’ terrain form classification algorithm Jasiewicz Stepinski (2013) based largely ‘GRASS GIS’ ‘r.geomorphon’ module. implementation employs novel algorithm written C++ ‘RcppParallel’. sake simplicity, GRASS-specific implementation details added. See ?geomorphons details.","code":""},{"path":"http://humus.rocks/rgeomorphon/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Lightweight Implementation of the Geomorphon Algorithm","text":"can install {rgeomorphon} CRAN: can install development version GitHub:","code":"install.packages(\"rgeomorphon\") # install.packages(\"remotes\") remotes::install_github(\"brownag/rgeomorphon\")"},{"path":"http://humus.rocks/rgeomorphon/index.html","id":"volcano-example","dir":"","previous_headings":"","what":"Volcano Example","title":"A Lightweight Implementation of the Geomorphon Algorithm","text":"basic example using classic R volcano dataset {terra} SpatRaster object input. volcano 10m 10m grid elevation values Maunga Whau Auckland volcanic field New Zealand.","code":"library(terra) #> terra 1.8.56 library(rgeomorphon)  # PARAMETERS SEARCH = 7       # outer search radius (cells) SKIP = 0         # inner skip radius (cells) FLAT = 1         # flat angle threshold (degrees)  # classic volcano elevation data data(\"volcano\", package = \"datasets\")  # construct and georeference a SpatRaster object dem <- terra::rast(volcano) terra::crs(dem) <- terra::crs(\"EPSG:2193\") terra::ext(dem) <- c(1756968, 1757578, 5917000, 5917870) names(dem) <- \"Elevation (meters)\"  # calculate geomorphons \"forms\" system.time({     rg <- geomorphons(         dem,         search = SEARCH,         skip = SKIP,         flat = FLAT     ) }) #>    user  system elapsed  #>   0.078   0.003   0.069  # inspect result plot(c(dem, rg),       plg = list(x = \"bottomleft\",                  bty = \"o\",                  bg = \"white\"))"},{"path":"http://humus.rocks/rgeomorphon/index.html","id":"salton-sea-example","dir":"","previous_headings":"","what":"Salton Sea Example","title":"A Lightweight Implementation of the Geomorphon Algorithm","text":"Now bathymetry example using built Salton Sea dataset (salton). See help(\"salton\") details.","code":"library(terra) library(rgeomorphon)  # PARAMETERS SEARCH = 10      # outer search radius (cells) SKIP = 3         # inner skip radius (cells) FLAT = 0.1       # flat angle threshold (degrees)  # salton sea bathymetry sample data data(\"salton\", package = \"rgeomorphon\")  # construct and georeference a SpatRaster object dem <- terra::rast(salton) terra::crs(dem) <- attr(salton, \"crs\") terra::ext(dem) <- attr(salton, \"extent\") names(dem) <- \"Elevation (feet)\"  # calculate bathymorphons using 6-form system system.time({     rg <- geomorphons(         dem,         search = SEARCH,         skip = SKIP,         flat = FLAT,         forms = \"forms6\"     ) }) #>    user  system elapsed  #>   0.130   0.006   0.116  # inspect result plot(c(dem, rg),       plg = list(x = \"bottomleft\",                  bty = \"o\",                  bg = \"white\",                 cex = 0.85))"},{"path":"http://humus.rocks/rgeomorphon/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"A Lightweight Implementation of the Geomorphon Algorithm","text":"","code":"citation(\"rgeomorphon\") #> To cite package 'rgeomorphon' in publications use: #>  #>   Brown A (2025). _rgeomorphon: A Lightweight Implementation of the #>   'Geomorphon' Algorithm_. R package version 0.1.0, #>   <https://github.com/brownag/rgeomorphon/>. #>  #>   Jasiewicz J, Stepinski T (2013). \"Geomorphons - a pattern recognition #>   approach to classification and mapping of landforms.\" #>   _Geomorphology_, *182*, 147-156. doi:10.1016/j.geomorph.2012.11.005 #>   <https://doi.org/10.1016/j.geomorph.2012.11.005>. #>  #>   Jasiewicz J, Stepinski T, GRASS Development Team (2024). _Geographic #>   Resources Analysis Support System (GRASS) Software, Version 8.3_. #>   Open Source Geospatial Foundation, USA. r.geomorphon module, #>   <https://grass.osgeo.org/grass-stable/manuals/r.geomorphon.html>. #>  #> To see these entries in BibTeX format, use 'print(<citation>, #> bibtex=TRUE)', 'toBibtex(.)', or set #> 'options(citation.bibtex.max=999)'."},{"path":"http://humus.rocks/rgeomorphon/reference/forms_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a forms_matrix object — forms_matrix","title":"Create a forms_matrix object — forms_matrix","text":"constructor function wraps 9x9 integer matrix associates set levels, creating 'forms_matrix' object.","code":""},{"path":"http://humus.rocks/rgeomorphon/reference/forms_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a forms_matrix object — forms_matrix","text":"","code":"forms_matrix(x, levels = get_forms_grass_enum())"},{"path":"http://humus.rocks/rgeomorphon/reference/forms_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a forms_matrix object — forms_matrix","text":"x Integer. 9x9 matrix. levels Named integer vector. Map integer values string names. Default: get_forms_grass_enum()","code":""},{"path":"http://humus.rocks/rgeomorphon/reference/forms_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a forms_matrix object — forms_matrix","text":"object class c(\"forms_matrix\", \"matrix\", \"array\").","code":""},{"path":"http://humus.rocks/rgeomorphon/reference/forms_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a forms_matrix object — forms_matrix","text":"function intended custom classification matrix based positive negative overlooks. See forms_matrix_get() convenient accessor standard classification systems 4, 5, 6 10 forms.","code":""},{"path":"http://humus.rocks/rgeomorphon/reference/forms_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a forms_matrix object — forms_matrix","text":"","code":"library(terra) #> terra 1.8.60 library(rgeomorphon)  # default values x <- forms_matrix_get(num_forms = 10, levels = get_forms_grass_enum())  # inspect x #> <forms_matrix> object #>  #>       pos=0  pos=1  pos=2  pos=3  pos=4  pos=5  pos=6  pos=7  pos=8  #> neg=0 G_FL   G_FL   G_FL   G_FS   G_FS   G_VL   G_VL   G_VL   G_PT   #> neg=1 G_FL   G_FL   G_FS   G_FS   G_FS   G_VL   G_VL   G_VL   G_NONE #> neg=2 G_FL   G_SH   G_SL   G_SL   G_HL   G_HL   G_VL   G_NONE G_NONE #> neg=3 G_SH   G_SH   G_SL   G_SL   G_SL   G_HL   G_NONE G_NONE G_NONE #> neg=4 G_SH   G_SH   G_SP   G_SL   G_SL   G_NONE G_NONE G_NONE G_NONE #> neg=5 G_RI   G_RI   G_SP   G_SP   G_NONE G_NONE G_NONE G_NONE G_NONE #> neg=6 G_RI   G_RI   G_RI   G_NONE G_NONE G_NONE G_NONE G_NONE G_NONE #> neg=7 G_RI   G_RI   G_NONE G_NONE G_NONE G_NONE G_NONE G_NONE G_NONE #> neg=8 G_PK   G_NONE G_NONE G_NONE G_NONE G_NONE G_NONE G_NONE G_NONE  # create a 9-class system where PEAK is combined with RIDGE x[x == 2] <- 3 a <- get_forms_grass_enum() a <- a[!names(a) == \"G_PK\"]  # create a forms matrix with custom levels fm <- forms_matrix(x, a)  # run geomorphon algorithm SEARCH = 7       # outer search radius (cells) SKIP = 1         # inner skip radius (cells) DIST = 0         # flatness distance (cells) FLAT = 1         # flat angle threshold MODE = \"anglev1\" # comparison mode  ## classic volcano data(\"volcano\", package = \"datasets\") dem <- terra::rast(volcano) terra::crs(dem) <- terra::crs(\"EPSG:2193\") terra::ext(dem) <- c(1756968, 1757578, 5917000, 5917870) names(dem) <- \"elevation\"  # include original forms, positive, and negative output res <- geomorphons(     dem,     search = SEARCH,     skip = SKIP,     dist = DIST,     flat = FLAT,     comparison_mode = MODE,     forms = TRUE,     positive = TRUE,     negative = TRUE )   # apply custom classification to positive and negative  res2 <- geomorphon_theme(    forms_matrix_apply(        x = res[[c(\"positive\", \"negative\")]],        rcl = fm    )  )   # compare with default  terra::plot(terra::rast(c(`10 form`=res$forms, `9 form`=res2)))"},{"path":"http://humus.rocks/rgeomorphon/reference/forms_matrix_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a forms_matrix to Positive and Negative Overlooks — forms_matrix_apply","title":"Apply a forms_matrix to Positive and Negative Overlooks — forms_matrix_apply","text":"function applies forms_matrix reclassify SpatRaster object 2 layers containing positive negative overlooks.","code":""},{"path":"http://humus.rocks/rgeomorphon/reference/forms_matrix_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a forms_matrix to Positive and Negative Overlooks — forms_matrix_apply","text":"","code":"forms_matrix_apply(   x,   rcl = forms_matrix_get(),   positive = \"positive\",   negative = \"negative\",   ... )"},{"path":"http://humus.rocks/rgeomorphon/reference/forms_matrix_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a forms_matrix to Positive and Negative Overlooks — forms_matrix_apply","text":"x SpatRaster containing two layers names specified positive negative. rcl forms_matrix. Matrix use classification x. Rows \"negative\" columns \"positive\". positive Character. Layer name positive count. Default: \"positive\". negative Character. Layer name negative count. Default: \"negative\". ... Additional arguments passed terra::classify().","code":""},{"path":"http://humus.rocks/rgeomorphon/reference/forms_matrix_apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a forms_matrix to Positive and Negative Overlooks — forms_matrix_apply","text":"SpatRaster containing classification result.","code":""},{"path":[]},{"path":"http://humus.rocks/rgeomorphon/reference/forms_matrix_apply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a forms_matrix to Positive and Negative Overlooks — forms_matrix_apply","text":"","code":"library(terra) library(rgeomorphon)  SEARCH = 7       # outer search radius (cells) SKIP = 1         # inner skip radius (cells) DIST = 0         # flatness distance (cells) FLAT = 1         # flat angle threshold MODE = \"anglev1\" # comparison mode  ## classic volcano data(\"volcano\", package = \"datasets\") dem <- terra::rast(volcano) terra::crs(dem) <- terra::crs(\"EPSG:2193\") terra::ext(dem) <- c(1756968, 1757578, 5917000, 5917870) names(dem) <- \"elevation\"  res <- geomorphons(     dem,     search = SEARCH,     skip = SKIP,     dist = DIST,     flat = FLAT,     comparison_mode = MODE,     forms = TRUE,     ternary = TRUE,     positive = TRUE,     negative = TRUE )  res2 <- terra::rast(lapply(c(4, 5, 6), function(n) {   geomorphon_theme(     forms_matrix_apply(         x = res[[c(\"positive\", \"negative\")]],         rcl = forms_matrix_get(n)     )   ) })) names(res2) <- c(\"forms4\", \"forms5\", \"forms6\")  terra::plot(c(res, res2))"},{"path":"http://humus.rocks/rgeomorphon/reference/forms_matrix_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a forms_matrix for Geomorphon Classification — forms_matrix_get","title":"Get a forms_matrix for Geomorphon Classification — forms_matrix_get","text":"Gets one internally defined forms matrices. form matrix defined classic 10-form output (default; Jasiewicz & Stepinski, 2013) well three simplified classes: 4-form, 5-form, 6-form (Masetti et al., 2018)","code":""},{"path":"http://humus.rocks/rgeomorphon/reference/forms_matrix_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a forms_matrix for Geomorphon Classification — forms_matrix_get","text":"","code":"forms_matrix_get(num_forms = 10, levels = get_forms_grass_enum())"},{"path":"http://humus.rocks/rgeomorphon/reference/forms_matrix_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a forms_matrix for Geomorphon Classification — forms_matrix_get","text":"num_forms Integer. number forms classify, one 4, 5, 6, 10 (default). levels Named integer values 0 10 corresponding form class labels. Default: get_forms_grass_enum()","code":""},{"path":"http://humus.rocks/rgeomorphon/reference/forms_matrix_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a forms_matrix for Geomorphon Classification — forms_matrix_get","text":"object class forms_matrix","code":""},{"path":"http://humus.rocks/rgeomorphon/reference/forms_matrix_get.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a forms_matrix for Geomorphon Classification — forms_matrix_get","text":"creating custom classification systems see forms_matrix() constructor.","code":""},{"path":"http://humus.rocks/rgeomorphon/reference/forms_matrix_get.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get a forms_matrix for Geomorphon Classification — forms_matrix_get","text":"Stepinski, T., Jasiewicz, J., 2011, Geomorphons - new approach classification landform, : Eds: Hengl, T., Evans, .S., Wilson, J.P., Gould, M., Proceedings Geomorphometry 2011, Redlands, 109-112. Available online: https://www.geomorphometry.org/uploads/pdf/pdf2011/StepinskiJasiewicz2011geomorphometry.pdf Jasiewicz, J., Stepinski, T., 2013, Geomorphons - pattern recognition approach classification mapping landforms, Geomorphology, vol. 182, 147-156. (doi:10.1016/j.geomorph.2012.11.005 ) Masetti, G., Mayer, L. ., & Ward, L. G. 2018, Bathymetry- Reflectivity-Based Approach Seafloor Segmentation. Geosciences, 8(1), 14. (doi:10.3390/geosciences8010014 )","code":""},{"path":[]},{"path":"http://humus.rocks/rgeomorphon/reference/forms_matrix_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a forms_matrix for Geomorphon Classification — forms_matrix_get","text":"","code":"forms_matrix_get() #> <forms_matrix> object #>  #>       pos=0  pos=1  pos=2  pos=3  pos=4  pos=5  pos=6  pos=7  pos=8  #> neg=0 G_FL   G_FL   G_FL   G_FS   G_FS   G_VL   G_VL   G_VL   G_PT   #> neg=1 G_FL   G_FL   G_FS   G_FS   G_FS   G_VL   G_VL   G_VL   G_NONE #> neg=2 G_FL   G_SH   G_SL   G_SL   G_HL   G_HL   G_VL   G_NONE G_NONE #> neg=3 G_SH   G_SH   G_SL   G_SL   G_SL   G_HL   G_NONE G_NONE G_NONE #> neg=4 G_SH   G_SH   G_SP   G_SL   G_SL   G_NONE G_NONE G_NONE G_NONE #> neg=5 G_RI   G_RI   G_SP   G_SP   G_NONE G_NONE G_NONE G_NONE G_NONE #> neg=6 G_RI   G_RI   G_RI   G_NONE G_NONE G_NONE G_NONE G_NONE G_NONE #> neg=7 G_RI   G_RI   G_NONE G_NONE G_NONE G_NONE G_NONE G_NONE G_NONE #> neg=8 G_PK   G_NONE G_NONE G_NONE G_NONE G_NONE G_NONE G_NONE G_NONE"},{"path":"http://humus.rocks/rgeomorphon/reference/geomorphon_chunks_needed.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Tile Processing Needs — geomorphon_chunks_needed","title":"Estimate Tile Processing Needs — geomorphon_chunks_needed","text":"geomorphon_chunks_needed() heuristic number tiles needed calculate geomorphons larger--memory rasters. Allows scaling number parallel workers, multiplicative factor memory needs, multiplicative factor worker needs.","code":""},{"path":"http://humus.rocks/rgeomorphon/reference/geomorphon_chunks_needed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Tile Processing Needs — geomorphon_chunks_needed","text":"","code":"geomorphon_chunks_needed(   x,   workers = Sys.getenv(\"R_RGEOMORPHON_N_WORKERS\", unset = 1),   scl_need = Sys.getenv(\"R_RGEOMORPHON_MEM_SCALE_NEED\", unset = 10),   scl_workers = Sys.getenv(\"R_RGEOMORPHON_MEM_SCALE_WORKERS\", unset = 1),   pow_total = Sys.getenv(\"R_RGEOMORPHON_MEM_POWER\", unset = 0.5) )"},{"path":"http://humus.rocks/rgeomorphon/reference/geomorphon_chunks_needed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Tile Processing Needs — geomorphon_chunks_needed","text":"x SpatRaster object. workers integer. Number parallel workers. Default uses value environment variable R_RGEOMORPHON_N_WORKERS. unset, 1 scl_need numeric. Scaling factor memory needs. Default uses value environment variable R_RGEOMORPHON_MEM_SCALE_NEED. unset, 10. scl_workers numeric. Scaling factor worker. Default uses value environment variable R_RGEOMORPHON_MEM_SCALE_WORKERS. unset, 1. pow_total numeric. Exponent scaling total number chunks. Default uses value environment variable R_RGEOMORPHON_MEM_POWER. unset, 1.","code":""},{"path":"http://humus.rocks/rgeomorphon/reference/geomorphon_chunks_needed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Tile Processing Needs — geomorphon_chunks_needed","text":"integer. Number tile chunks divide x .","code":""},{"path":"http://humus.rocks/rgeomorphon/reference/geomorphon_chunks_needed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Tile Processing Needs — geomorphon_chunks_needed","text":"","code":"data(\"salton\", package = \"rgeomorphon\")  x <- terra::rast(salton) terra::ext(x) <- attr(salton, \"extent\") terra::crs(x) <- attr(salton, \"crs\")  geomorphon_chunks_needed(x) #> [1] 1"},{"path":"http://humus.rocks/rgeomorphon/reference/geomorphon_theme.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply Geomorphon Theme to Result Object — geomorphon_categories","title":"Apply Geomorphon Theme to Result Object — geomorphon_categories","text":"Applies standard class names colors SpatRaster, creates factor matrix. Input values integers 1 10.","code":""},{"path":"http://humus.rocks/rgeomorphon/reference/geomorphon_theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply Geomorphon Theme to Result Object — geomorphon_categories","text":"","code":"geomorphon_categories()  geomorphon_colors()  geomorphon_theme(x, forms = \"forms10\")"},{"path":"http://humus.rocks/rgeomorphon/reference/geomorphon_theme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply Geomorphon Theme to Result Object — geomorphon_categories","text":"x SpatRaster matrix object. forms character. One : \"forms10\" (default), \"forms6\", \"forms5\", \"forms4\". themes corresponding built-10-form, 6-form, 5-form, 4-form \"forms\" outputs geomorphons().","code":""},{"path":"http://humus.rocks/rgeomorphon/reference/geomorphon_theme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply Geomorphon Theme to Result Object — geomorphon_categories","text":"SpatRaster matrix object geomorphon class names (colors SpatRaster) applied.","code":""},{"path":"http://humus.rocks/rgeomorphon/reference/geomorphon_theme.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply Geomorphon Theme to Result Object — geomorphon_categories","text":"x matrix result factor using geomorphon_categories(). Values integers 1 10 labels geomorphon form names.","code":""},{"path":"http://humus.rocks/rgeomorphon/reference/geomorphon_theme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply Geomorphon Theme to Result Object — geomorphon_categories","text":"","code":"geomorphon_theme(1:10) #>  [1] \"Flat\"      \"Peak\"      \"Ridge\"     \"Shoulder\"  \"Spur\"      \"Slope\"     #>  [7] \"Hollow\"    \"Footslope\" \"Valley\"    \"Pit\""},{"path":"http://humus.rocks/rgeomorphon/reference/geomorphons.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Geomorphons — geomorphons","title":"Calculate Geomorphons — geomorphons","text":"'Rcpp' implementation 'geomorphon' terrain classification system based 'r.geomorphon' algorithm Jasiewicz Stepinski (2013) 'GRASS GIS'.","code":""},{"path":"http://humus.rocks/rgeomorphon/reference/geomorphons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Geomorphons — geomorphons","text":"","code":"geomorphons(   elevation,   filename = NULL,   search = 3,   skip = 0,   flat_angle_deg = 1,   dist = 0,   comparison_mode = \"anglev1\",   tdist = 0,   forms = TRUE,   ternary = FALSE,   positive = FALSE,   negative = FALSE,   use_meters = FALSE,   nodata_val = NA_integer_,   xres = NULL,   yres = xres,   simplify = FALSE,   LAPPLY.FUN = lapply,   nchunk = geomorphon_chunks_needed(elevation) )"},{"path":"http://humus.rocks/rgeomorphon/reference/geomorphons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Geomorphons — geomorphons","text":"elevation matrix SpatRaster object. Digital Elevation Model values. STRONGLY recommended use grid projected coordinate system. filename character. Output filename. Default NULL creates temporary file. search numeric. User input search radius (default: 3). Units depend use_meters. skip numeric. User input skip radius (default: 0). Units depend use_meters. flat_angle_deg numeric. Flatness angle threshold degrees. Default: 1.0. dist numeric. Flatness distance (default: 0). Units depend use_meters. comparison_mode Character. One \"anglev1\", \"anglev2\", \"anglev2_distance\". Default: \"anglev1\". tdist numeric. Terrain distance factor. greater 0, overrides Z tolerance angular logic. Default: 0.0. forms character. Number geomorphon forms identify. One \"forms10 (default), \"forms6\", \"forms5\", \"forms4. ternary logical. Include \"ternary\" output? Default: FALSE positive logical. Include \"positive\" output? Default: FALSE negative logical. Include \"negative\" output? Default: FALSE use_meters Logical. Default: FALSE uses cell units. Set TRUE specify search, skip, dist units meters. nodata_val numeric. NODATA value. Default: NA_integer_. xres numeric. X grid resolution (used elevation matrix). Default: NULL. yres numeric. Y grid resolution (used elevation matrix). Default: xres. simplify logical. result length 1 list, first element returned. Default: FALSE LAPPLY.FUN lapply()-like function future.apply::future_lapply(). Default: lapply(). nchunk Number tile chunks use. Default: geomorphon_chunks_needed(elevation).","code":""},{"path":"http://humus.rocks/rgeomorphon/reference/geomorphons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Geomorphons — geomorphons","text":"List SpatRaster matrix geomorphon algorithm outputs. one forms, ternary, positive, negative set result list. one result type, default simplify argument, result first () element list.","code":""},{"path":"http://humus.rocks/rgeomorphon/reference/geomorphons.html","id":"distance-calculation-and-coordinate-reference-systems","dir":"Reference","previous_headings":"","what":"Distance Calculation and Coordinate Reference Systems","title":"Calculate Geomorphons — geomorphons","text":"algorithm assumes planar distances angles calculated based cell resolutions, strongly recommended elevation data projected coordinate system.","code":""},{"path":"http://humus.rocks/rgeomorphon/reference/geomorphons.html","id":"buffer-around-area-of-interest","dir":"Reference","previous_headings":"","what":"Buffer Around Area of Interest","title":"Calculate Geomorphons — geomorphons","text":"reliable geomorphon classification, especially near study area boundaries, recommended use raster includes buffer least search + 1 cells around area interest. implementation utilizes available DEM data specified search radius. buffer search + skip + 1 cells automatically applied processing SpatRaster input, necessary avoid edge effects processing large rasters tiles. Matrix input altered.","code":""},{"path":"http://humus.rocks/rgeomorphon/reference/geomorphons.html","id":"tiled-processing-for-large-rasters","dir":"Reference","previous_headings":"","what":"Tiled Processing for Large Rasters","title":"Calculate Geomorphons — geomorphons","text":"Digital Elevation Models (DEMs) large fit available memory, rgeomorphon employs automatic tiled processing workflow. method breaks large raster grid smaller, manageable chunks processed sequentially. premise approach use buffered tiles. ensure seamless results avoid edge artifacts, buffer surrounding data added chunk geomorphon calculation performed. provides necessary neighborhood cells algorithm work correctly. tile processed, buffer region removed result. Finally, clean, processed tiles mosaicked back together single, complete output raster perfectly matches extent original input DEM. entire workflow handled internally main geomorphons() function, can also leverage parallel processing speed operation multi-core systems. See vignette parallel processing 'future' package. number chunks needed can controlled setting several environment variables. variables read function runtime.","code":""},{"path":"http://humus.rocks/rgeomorphon/reference/geomorphons.html","id":"default-behavior","dir":"Reference","previous_headings":"","what":"Default Behavior","title":"Calculate Geomorphons — geomorphons","text":"default, function assumes single worker, scales estimated memory needed factor 10, applies square root total number chunks. can replicated following settings:","code":"Sys.setenv(R_RGEOMORPHON_N_WORKERS = 1) Sys.setenv(R_RGEOMORPHON_MEM_SCALE_NEED = 10) Sys.setenv(R_RGEOMORPHON_MEM_SCALE_WORKERS = 1) Sys.setenv(R_RGEOMORPHON_MEM_POWER = 0.5)"},{"path":"http://humus.rocks/rgeomorphon/reference/geomorphons.html","id":"customized-behavior","dir":"Reference","previous_headings":"","what":"Customized Behavior","title":"Calculate Geomorphons — geomorphons","text":"can customize tiling behavior setting environment variables different values. example, use four workers, scale memory needs factor five, apply worker scaling factor two, power 1.5 total, set following:","code":"Sys.setenv(R_RGEOMORPHON_N_WORKERS = 4) Sys.setenv(R_RGEOMORPHON_MEM_SCALE_NEED = 5) Sys.setenv(R_RGEOMORPHON_MEM_SCALE_WORKERS = 2) Sys.setenv(R_RGEOMORPHON_MEM_POWER = 1.5)"},{"path":"http://humus.rocks/rgeomorphon/reference/geomorphons.html","id":"comparison-with-grass-r-geomorphon-","dir":"Reference","previous_headings":"","what":"Comparison with GRASS 'r.geomorphon'","title":"Calculate Geomorphons — geomorphons","text":"implementation achieves high agreement classification logic GRASS GIS 'r.geomorphon' using equivalent parameters data projected coordinate system. 'r.geomorphon' employs row buffering strategy can, cells near edges raster, result truncated line--sight compared full raster extent. may lead GRASS classify edge-region cells differently NODATA implementation may produce 'valid' geomorphon form given available data. information 'r.geomorphon' module can found GRASS GIS manual: https://grass.osgeo.org/grass-stable/manuals/r.geomorphon.html","code":""},{"path":"http://humus.rocks/rgeomorphon/reference/geomorphons.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Geomorphons — geomorphons","text":"Stepinski, T., Jasiewicz, J., 2011, Geomorphons - new approach classification landform, : Eds: Hengl, T., Evans, .S., Wilson, J.P., Gould, M., Proceedings Geomorphometry 2011, Redlands, 109-112. Available online: https://www.geomorphometry.org/uploads/pdf/pdf2011/StepinskiJasiewicz2011geomorphometry.pdf Jasiewicz, J., Stepinski, T., 2013, Geomorphons - pattern recognition approach classification mapping landforms, Geomorphology, vol. 182, 147-156. (doi:10.1016/j.geomorph.2012.11.005 )","code":""},{"path":[]},{"path":"http://humus.rocks/rgeomorphon/reference/geomorphons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Geomorphons — geomorphons","text":"","code":"library(terra) library(rgeomorphon)  SEARCH = 7       # outer search radius (cells) SKIP = 1         # inner skip radius (cells) DIST = 0         # flatness distance (cells) FLAT = 1         # flat angle threshold MODE = \"anglev1\" # comparison mode  ## classic volcano data(\"volcano\", package = \"datasets\") dem <- terra::rast(volcano) terra::crs(dem) <- terra::crs(\"EPSG:2193\") terra::ext(dem) <- c(1756968, 1757578, 5917000, 5917870) names(dem) <- \"elevation\"  system.time({     rg <- geomorphons(         dem,         search = SEARCH,         skip = SKIP,         dist = DIST,         flat = FLAT,         comparison_mode = MODE     ) }) #>    user  system elapsed  #>   0.036   0.000   0.030   plot(c(dem, rg))"},{"path":"http://humus.rocks/rgeomorphon/reference/print.forms_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for a forms_matrix object — print.forms_matrix","title":"Print method for a forms_matrix object — print.forms_matrix","text":"Controls 'forms_matrix' object displayed console.","code":""},{"path":"http://humus.rocks/rgeomorphon/reference/print.forms_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for a forms_matrix object — print.forms_matrix","text":"","code":"# S3 method for class 'forms_matrix' print(x, show_values = FALSE, ...)"},{"path":"http://humus.rocks/rgeomorphon/reference/print.forms_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for a forms_matrix object — print.forms_matrix","text":"x forms_matrix object print. show_values logical value. FALSE (default), prints enum names. TRUE, prints underlying integer values. ... Additional arguments passed print (used ).","code":""},{"path":"http://humus.rocks/rgeomorphon/reference/print.forms_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for a forms_matrix object — print.forms_matrix","text":"Invisibly returns original object x.","code":""},{"path":"http://humus.rocks/rgeomorphon/reference/print.forms_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for a forms_matrix object — print.forms_matrix","text":"","code":"print(forms_matrix_get(num_forms = 4)) #> <forms_matrix> object #>  #>       pos=0  pos=1  pos=2  pos=3  pos=4  pos=5  pos=6  pos=7  pos=8  #> neg=0 G_FL   G_FL   G_FL   G_SL   G_VL   G_VL   G_VL   G_VL   G_VL   #> neg=1 G_FL   G_FL   G_SL   G_SL   G_VL   G_VL   G_VL   G_VL   G_NONE #> neg=2 G_FL   G_SL   G_SL   G_SL   G_SL   G_VL   G_VL   G_NONE G_NONE #> neg=3 G_SL   G_SL   G_SL   G_SL   G_SL   G_SL   G_NONE G_NONE G_NONE #> neg=4 G_RI   G_RI   G_SL   G_SL   G_SL   G_NONE G_NONE G_NONE G_NONE #> neg=5 G_RI   G_RI   G_RI   G_SL   G_NONE G_NONE G_NONE G_NONE G_NONE #> neg=6 G_RI   G_RI   G_RI   G_NONE G_NONE G_NONE G_NONE G_NONE G_NONE #> neg=7 G_RI   G_RI   G_NONE G_NONE G_NONE G_NONE G_NONE G_NONE G_NONE #> neg=8 G_RI   G_NONE G_NONE G_NONE G_NONE G_NONE G_NONE G_NONE G_NONE"},{"path":"http://humus.rocks/rgeomorphon/reference/rgeomorphon-package.html","id":null,"dir":"Reference","previous_headings":"","what":"rgeomorphon: A Lightweight Implementation of the 'Geomorphon' Algorithm — rgeomorphon-package","title":"rgeomorphon: A Lightweight Implementation of the 'Geomorphon' Algorithm — rgeomorphon-package","text":"lightweight implementation 'geomorphon' terrain form classification algorithm Jasiewicz Stepinski (2013) based largely 'GRASS GIS' 'r.geomorphon' module. implementation employs novel algorithm written C++ ‘RcppParallel’.","code":""},{"path":[]},{"path":"http://humus.rocks/rgeomorphon/reference/rgeomorphon-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rgeomorphon: A Lightweight Implementation of the 'Geomorphon' Algorithm — rgeomorphon-package","text":"Maintainer: Andrew Brown brown.andrewg@gmail.com (ORCID)","code":""},{"path":"http://humus.rocks/rgeomorphon/reference/salton.html","id":null,"dir":"Reference","previous_headings":"","what":"Bathymetric Information on California's Salton Sea — salton","title":"Bathymetric Information on California's Salton Sea — salton","text":"Matrix derived one foot contours Salton Sea floor. data created vertical datum NGVD29 NAD83 California Teale Albers (EPSG:3110) projection. value matrix represents elevation, meters, 300 m x 300 m cell. Cell values interpolated using thin plate spline fit exhaustive sample contour line vertices.","code":""},{"path":"http://humus.rocks/rgeomorphon/reference/salton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bathymetric Information on California's Salton Sea — salton","text":"","code":"salton"},{"path":"http://humus.rocks/rgeomorphon/reference/salton.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Bathymetric Information on California's Salton Sea — salton","text":"matrix, cells representing X, Y grid locations, attributes \"crs\" (containing WKT2019 string coordinate reference system information) \"extent\" (named numeric length 4, containing xmin, xmax, ymin, ymax)","code":""},{"path":"http://humus.rocks/rgeomorphon/reference/salton.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Bathymetric Information on California's Salton Sea — salton","text":"California Division Fish Wildlife. 2007. Bathymetric Contours (1 foot) - Salton Sea (ds426). Available online: https://map.dfg.ca.gov/metadata/ds0426.html","code":""},{"path":"http://humus.rocks/rgeomorphon/reference/salton.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bathymetric Information on California's Salton Sea — salton","text":"","code":"str(salton) #>  num [1:161, 1:165] NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN ... #>  - attr(*, \"crs\")= chr \"PROJCRS[\\\"NAD83 / California Albers\\\",\\n    BASEGEOGCRS[\\\"NAD83\\\",\\n        DATUM[\\\"North American Datum 1983\\\"\"| __truncated__ #>  - attr(*, \"extent\")= Named num [1:4] 363300 412800 -538100 -489800 #>   ..- attr(*, \"names\")= chr [1:4] \"xmin\" \"xmax\" \"ymin\" \"ymax\"  # construct and georeference a SpatRaster object dem <- terra::rast(salton) terra::crs(dem) <- attr(salton, \"crs\") terra::ext(dem) <- attr(salton, \"extent\") names(dem) <- \"Elevation (feet)\"  dem #> class       : SpatRaster  #> size        : 161, 165, 1  (nrow, ncol, nlyr) #> resolution  : 300, 300  (x, y) #> extent      : 363300, 412800, -538100, -489800  (xmin, xmax, ymin, ymax) #> coord. ref. : NAD83 / California Albers (EPSG:3310)  #> source(s)   : memory #> name        : Elevation (feet)  #> min value   :        -278.1904  #> max value   :        -216.2552"},{"path":"http://humus.rocks/rgeomorphon/news/index.html","id":"rgeomorphon-020","dir":"Changelog","previous_headings":"","what":"rgeomorphon 0.2.0","title":"rgeomorphon 0.2.0","text":"Add positive, negative, ternary arguments output types (#3) Add support 4-, 5-, 6-form classifications via forms argument Add forms_matrix_* methods classifying positive negative output using arbitrary forms matrices (lookup tables) forms_matrix_get() obtain forms matrices hard coded algorithm forms_matrix() create new object class forms_matrix (basically factor matrix) forms_matrix_apply() classify positive negative outputs using forms_matrix Add new Salton Sea bathymetry dataset; see ?salton","code":""},{"path":"http://humus.rocks/rgeomorphon/news/index.html","id":"rgeomorphon-010","dir":"Changelog","previous_headings":"","what":"rgeomorphon 0.1.0","title":"rgeomorphon 0.1.0","text":"Initial GitHub release","code":""}]
